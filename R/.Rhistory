quants=df.iter%>%group_by(name,value)%>%count()%>%ungroup()%>%mutate(perc=round(n/sum(n),2))%>%select(-n)
complete_cases=round(sum(quants$n[!is.na(quants$value)])/sum(quants$n),3)
quants=quants%>%ungroup()%>%filter(!is.na(value))%>%slice_max(n = 2,order_by = perc)
quants
quants=df.iter%>%group_by(name,value)%>%count()%>%ungroup()%>%mutate(perc=round(n/sum(n),3))%>%select(-n)
complete_cases=round(sum(quants$n[!is.na(quants$value)])/sum(quants$n),2)
quants=quants%>%ungroup()%>%filter(!is.na(value))%>%slice_max(n = 2,order_by = perc)
quants
df.iter=NHANES.categorical.long%>%filter(name==variable)
quants=df.iter%>%group_by(name,value)%>%count()%>%ungroup()%>%mutate(perc=round(n/sum(n),3))%>%select(-n)
complete_cases=round(sum(quants$n[!is.na(quants$value)])/sum(quants$n),2)
quants=quants%>%ungroup()%>%filter(!is.na(value))%>%slice_max(n = 2,order_by = perc)
quants
quants=quants%>%ungroup()%>%filter(!is.na(value))%>%slice_max(n = 2,order_by = perc)%>%pivot_wider(id_cols = name)
df.iter=NHANES.categorical.long%>%filter(name==variable)
quants=df.iter%>%group_by(name,value)%>%count()%>%ungroup()%>%mutate(perc=round(n/sum(n),3))%>%select(-n)
complete_cases=round(sum(quants$n[!is.na(quants$value)])/sum(quants$n),2)
quants2=quants%>%ungroup()%>%filter(!is.na(value))%>%slice_max(n = 2,order_by = perc)%>%pivot_wider(id_cols = name)
quants2
df.iter=NHANES.categorical.long%>%filter(name==variable)
quants=df.iter%>%group_by(name,value)%>%count()%>%ungroup()%>%mutate(perc=round(n/sum(n),3))%>%select(-n)
complete_cases=round(sum(quants$n[!is.na(quants$value)])/sum(quants$n),2)
quants2=quants%>%ungroup()%>%filter(!is.na(value))%>%slice_max(n = 2,order_by = perc)%>%pivot_wider(id_cols = name)
quants2
quants2
quants2=quants%>%ungroup()%>%filter(!is.na(value))%>%slice_max(n = 2,order_by = perc)
quants2
quants2=quants%>%ungroup()%>%filter(!is.na(value))%>%slice_max(n = 2,order_by = perc)%>%mutate(num=seq_len(2))%>%pivot_wider(names_from = num,values_from=value)
quants2
quants2=quants%>%ungroup()%>%filter(!is.na(value))%>%slice_max(n = 2,order_by = perc)%>%mutate(num=seq_len(2))
data.frame(name=variable,MostCommon=quants2$value[1],SecondCommon=quants2$value[2])
data.frame
data.frame(name=variable,MostCommon=quants2$value[1],SecondCommon=quants2$value[2])
data.frame(name=variable,MostCommon=quants2$value[1],Perc=quants2$perc[1],SecondCommon=quants2$value[2],Perc2=quants2$perc[2],CompleteCases=complete_cases)
data.frame(name=variable,MostCommon=quants2$value[1],Perc=quants2$perc[1],SecondCommon=quants2$value[2],Perc2=quants2$perc[2],CompleteCases=complete_cases)
a=data.frame(name=variable,MostCommon=quants2$value[1],Perc=quants2$perc[1],SecondCommon=quants2$value[2],Perc2=quants2$perc[2],CompleteCases=complete_cases)
View(a)
complete_cases
complete_cases=round(sum(quants$n[!is.na(quants$value)])/sum(quants$n),2)
complete_cases
quants=df.iter%>%group_by(name,value)%>%count()%>%ungroup()%>%mutate(perc=round(n/sum(n),3))
complete_cases=round(sum(quants$n[!is.na(quants$value)])/sum(quants$n),2)
complete_cases
quants2=quants%>%ungroup()%>%filter(!is.na(value))%>%slice_max(n = 2,order_by = perc)%>%mutate(num=seq_len(2))
a=data.frame(name=variable,MostCommon=quants2$value[1],Perc=quants2$perc[1],SecondCommon=quants2$value[2],Perc2=quants2$perc[2],CompleteCases=complete_cases)
a
table.comms=data.frame()
for (variable in unique(NHANES.categorical.long$name)) {
df.iter=NHANES.categorical.long%>%filter(name==variable)
quants=df.iter%>%group_by(name,value)%>%count()%>%ungroup()%>%mutate(perc=round(n/sum(n),3))
complete_cases=round(sum(quants$n[!is.na(quants$value)])/sum(quants$n),2)
quants2=quants%>%ungroup()%>%filter(!is.na(value))%>%slice_max(n = 2,order_by = perc)%>%mutate(num=seq_len(2))
a=data.frame(name=variable,MostCommon=quants2$value[1],Perc=quants2$perc[1],SecondCommon=quants2$value[2],Perc2=quants2$perc[2],CompleteCases=complete_cases)
table.comms=rbind(df.iter,table.comms)
}
table.comms
table.comms=data.frame()
for (variable in unique(NHANES.categorical.long$name)) {
df.iter=NHANES.categorical.long%>%filter(name==variable)
quants=df.iter%>%group_by(name,value)%>%count()%>%ungroup()%>%mutate(perc=round(n/sum(n),3))
complete_cases=round(sum(quants$n[!is.na(quants$value)])/sum(quants$n),2)
quants2=quants%>%ungroup()%>%filter(!is.na(value))%>%slice_max(n = 2,order_by = perc)%>%mutate(num=seq_len(2))
a=data.frame(name=variable,MostCommon=quants2$value[1],Perc=quants2$perc[1],SecondCommon=quants2$value[2],Perc2=quants2$perc[2],CompleteCases=complete_cases)
table.comms=rbind(a,table.comms)
}
table.comms
table.comms=rbind(a,table.comms)%>%arrange(-CompleteCases)
table.comms=data.frame()
for (variable in unique(NHANES.categorical.long$name)) {
df.iter=NHANES.categorical.long%>%filter(name==variable)
quants=df.iter%>%group_by(name,value)%>%count()%>%ungroup()%>%mutate(perc=round(n/sum(n),3))
complete_cases=round(sum(quants$n[!is.na(quants$value)])/sum(quants$n),2)
quants2=quants%>%ungroup()%>%filter(!is.na(value))%>%slice_max(n = 2,order_by = perc)%>%mutate(num=seq_len(2))
a=data.frame(name=variable,MostCommon=quants2$value[1],Perc=quants2$perc[1],SecondCommon=quants2$value[2],Perc2=quants2$perc[2],CompleteCases=complete_cases)
table.comms=rbind(a,table.comms)%>%arrange(-CompleteCases)
}
table.comms
#Health Variables
phealth.1<-ggplot(NHANES.categorical,aes(x=BMIWHO,y=..count..))+geom_bar(fill='lightblue')+theme_bw()+coord_flip()
phealth.2<-ggplot(NHANES.categorical,aes(x=Diabetes,y=..count..))+geom_bar(fill='lightblue')+theme_bw()+coord_flip()
phealth.3<-ggplot(NHANES.categorical,aes(x=HealthGen,y=..count..))+geom_bar(fill='lightblue')+theme_bw()+coord_flip()
plot_row.health <- plot_grid(phealth.1, phealth.2,phealth.3,ncol = 3)
plot.health=plot_grid(plot_row.health)
#Habits Variables
plot.Habits1<-ggplot(NHANES.categorical,aes(x=PhysActive,y=..count..))+geom_bar(fill='lightblue')+theme_bw()+coord_flip()
plot.Habits2<-ggplot(NHANES.categorical,aes(x=TVHrsDay,y=..count..))+geom_bar(fill='lightblue')+theme_bw()+coord_flip()
plot.Habits3<-ggplot(NHANES.categorical,aes(x=SmokeNow,y=..count..))+geom_bar(fill='lightblue')+theme_bw()+coord_flip()
plot_row.habits <- plot_grid(plot.Habits1, plot.Habits2,plot.Habits3,ncol = 3)
plot.Habits=plot_grid(plot_row.habits)
#Psycological Variables
plot.psico1<-ggplot(NHANES.categorical,aes(x=LittleInterest,y=..count..))+geom_bar(fill='lightblue')+theme_bw()+coord_flip()
plot.psico2<-ggplot(NHANES.categorical,aes(x=Depressed,y=..count..))+geom_bar(fill='lightblue')+theme_bw()+coord_flip()
plot.psico3<-ggplot(NHANES.categorical,aes(x=SleepTrouble,y=..count..))+geom_bar(fill='lightblue')+theme_bw()+coord_flip()
plot_row.psico <- plot_grid(plot.psico1, plot.psico2,plot.psico3,ncol = 3)
plot.psico=plot_grid(plot_row.psico)
##Cross-graphs: Sleep Troubles
plotcrossHabitsPsico.1=ggplot(NHANES.categorical,aes(x=SleepTrouble,fill=PhysActive))+geom_bar(position='dodge')+theme_bw()+theme(legend.position = 'bottom',legend.background = element_rect(fill = "White",colour = "black",size = 0.1)) + guides(fill=guide_legend(nrow=2,byrow=TRUE))
plotcrossHabitsPsico.2=ggplot(NHANES.categorical,aes(x=SleepTrouble,fill=BMIWHO))+geom_bar(position='dodge')+theme_bw()+theme(legend.position = 'bottom',legend.background = element_rect(fill = "White",colour = "black",size =  0.1))+guides(fill=guide_legend(nrow=2,byrow=TRUE))
plotcrossHabitsPsico.3=ggplot(NHANES.categorical,aes(x=SleepTrouble,fill=HardDrugs))+geom_bar(position='dodge')+theme_bw()+theme(legend.position = 'bottom',legend.background = element_rect(fill = "White",colour = "black",size =  0.1))+guides(fill=guide_legend(nrow=2,byrow=TRUE))
plot_row.crosspsico <- plot_grid(plotcrossHabitsPsico.1, plotcrossHabitsPsico.2,ncol = 2,rel_widths = c(1.25,2))
plot.crosspsico=plot_grid(plot_row.crosspsico)
image(nhanes.transactions)
image(nhanes.transactions[1:500])
image(nhanes.transactions[1:100])
image(nhanes.transactions[1:200])
image(nhanes.transactions[1:100])
image(nhanes.transactions[1:120])
NHANES.categorical%>%head()
nhanes.transactions%>%str
nhanes.transactions%>%str()
NHANES.categorical%>%head()
library(tidyverse)
df1 <- NHANES.categorical.ids %>%
pivot_longer(-ID, names_to = "Variable", values_to = "Value") %>%
xtabs(~ID + Value, data = ., sparse = FALSE) %>%
crossprod(., .)
NHANES.categorical.ids=NHANES.categorical%>%mutate(ID=seq_len(nrow(NHANES.categorical.ids)))
NHANES.categorical.ids=NHANES.categorical%>%mutate(ID=seq_len(nrow(NHANES.categorical)))
df1 <- NHANES.categorical.ids %>%
pivot_longer(-ID, names_to = "Variable", values_to = "Value") %>%
xtabs(~ID + Value, data = ., sparse = FALSE) %>%
crossprod(., .)
df1
matrix_counts_diag <- matrix_counts %>%
pivot_longer(-ID, names_to = "Category", values_to = "Value") %>%
mutate(Value2 = Value) %>%
xtabs(~Value + Value2, data = ., sparse = FALSE) %>%
diag()
matrix_counts <- NHANES.categorical.ids %>%
pivot_longer(-ID, names_to = "Variable", values_to = "Value") %>%
xtabs(~ID + Value, data = ., sparse = FALSE) %>%
crossprod(., .)
matrix_counts_diag <- matrix_counts %>%
pivot_longer(-ID, names_to = "Category", values_to = "Value") %>%
mutate(Value2 = Value) %>%
xtabs(~Value + Value2, data = ., sparse = FALSE) %>%
diag()
matrix_counts_diag <- matrix_counts %>%
pivot_longer(-ID, names_to = "Variable", values_to = "Value") %>%
mutate(Value2 = Value) %>%
xtabs(~Value + Value2, data = ., sparse = FALSE) %>%
diag()
matrix_counts_diag <- NHANES.categorical.ids %>%
pivot_longer(-ID, names_to = "Variable", values_to = "Value") %>%
mutate(Value2 = Value) %>%
xtabs(~Value + Value2, data = ., sparse = FALSE) %>%
diag()
diag(matrix_counts) <- matrix_counts_diag
matrix_counts
ncol(matrix_counts)
library(igraph)
g1=graph_from_adjacency_matrix(matrix_counts,mode = 'undirected',weighted = T)
g1
g1=graph_from_adjacency_matrix(matrix_counts,mode = 'undirected',weighted = T,add.colnames = T)
plot(g1)
g_sub <- delete.edges(g1, E(g)[weight <= max(weight)*.60])
g_sub <- delete.edges(g1, E(g1)[weight <= max(weight)*.60])
plot(g1)
plot(g_sub)
g_sub <- delete.edges(g1, E(g1)[weight <= max(weight)*.10])
plot(g_sub)
g_sub <- delete.edges(g1, E(g1)[weight <= max(weight)*.010])
plot(g_sub)
g_sub <- delete.edges(g1, E(g1)[weight <= max(weight)*.90])
plot(g_sub)
g_sub <- delete.edges(g1, E(g1)[weight <= max(weight)*.50])
plot(g_sub)
plot(g_sub)
g_sub <- delete.edges(g1, E(g1)[weight <= max(weight)*0.10])
plot(g_sub)
g_sub <- delete.edges(g, E(g)[weight <= max(weight)*.10])
g_sub <- delete.edges(g1, E(g1)[weight <= max(weight)*.10])
plot(g_sub)
matrix_counts
plot(g1)
E(g1)
plot(g1, edge.width = E(s1)$weight)
plot(g1, edge.width = E(g1)$weight)
g1
g1=graph_from_adjacency_matrix(matrix_counts,mode = 'undirected',weighted = T,add.colnames = T)
plot(g1, edge.width = E(g1)$weight)
plot(g1)
g_sub <- delete.edges(g1, E(g1)[weight >= max(weight)*.90])
plot(g_sub)
g_sub <- delete.edges(g1, E(g1)[weight >= max(weight)*.80])
plot(g_sub)
g_sub <- delete.edges(g1, E(g1)[weight >= max(weight)*.10])
plot(g_sub)
g_sub <- delete.edges(g1, E(g1)[weight >= max(weight)*1])
plot(g_sub)
g_sub <- delete.edges(g1, E(g1)[weight > max(weight)*1])
plot(g_sub)
s1 <- subgraph.edges(g1, E(g1)[E(g1)$weight>2000], del=F)
plot(s1, layout=coords, edge.width = E(s1)$weight)
coords <- layout.auto(g1)
s1 <- subgraph.edges(g1, E(g1)[E(g1)$weight>2000], del=F)
coords <- layout.auto(g1)
plot(s1, layout=coords, edge.width = E(s1)$weight)
s1 <- subgraph.edges(g1, E(g1)[E(g1)$weight>20], del=F)
coords <- layout.auto(g1)
plot(s1, layout=coords, edge.width = E(s1)$weight)
g1=graph_from_adjacency_matrix(matrix_counts,mode = 'undirected',weighted = T,add.colnames = T)
E(g1)$color<-"blue"
plot(g1)
s1 <- subgraph.edges(g1, E(g1)[E(g1)$weight>20], del=F)
coords <- layout.auto(g1)
plot(s1, layout=coords, edge.width = E(s1)$weight)
plot(s1, layout=coords, edge.width = log(E(s1)$weight))
plot(s1, layout=coords, edge.width = log(E(s1)$weight/10))
plot(s1, layout=coords, edge.width = log(E(s1)$weight/100))
s1 <- subgraph.edges(g1, E(g1)[E(g1)$weight>2000], del=F)
coords <- layout.auto(g1)
plot(s1, layout=coords, edge.width = log(E(s1)$weight/100))
s1 <- subgraph.edges(g1, E(g1)[E(g1)$weight>200], del=F)
coords <- layout.auto(g1)
plot(s1, layout=coords, edge.width = log(E(s1)$weight/100))
plot(s1, layout=layout.lgl, edge.width = log(E(s1)$weight/100))
plot(s1, layout=layout.fruchterman.reingold(), edge.width = log(E(s1)$weight/100))
plot(s1, layout=layout.fruchterman.reingold, edge.width = log(E(s1)$weight/100))
plot(s1, layout=layout.fruchterman.reingold, edge.width = log(E(s1)$weight/100))
plot(s1, layout=layoutp, edge.width = log(E(s1)$weight/100))
layoutp=layout.fruchterman.reingold()
plot(s1, layout=layoutp, edge.width = log(E(s1)$weight/100))
layoutp=layout.fruchterman.reingold()
layoutp=layout.fruchterman.reingold(s1)
plot(s1, layout=layoutp, edge.width = log(E(s1)$weight/100))
layoutp=ayout=layout.lgl(s1)
plot(s1, layout=layoutp, edge.width = log(E(s1)$weight/100))
g1=graph_from_adjacency_matrix(matrix_counts,mode = 'undirected',weighted = T,add.colnames = T)
g1=delete.vertices(g1,which(degree(g)<10000))
g1=delete.vertices(g1,which(degree(g1)<10000))
E(g1)$color<-"blue"
plot(g1)
g1=delete.vertices(g1,which(degree(g1)<1000))
E(g1)$color<-"blue"
plot(g1)
g1=graph_from_adjacency_matrix(matrix_counts,mode = 'undirected',weighted = T,add.colnames = T)
g1=delete.vertices(g1,which(degree(g1)<1000))
E(g1)$color<-"blue"
plot(g1)
g1=graph_from_adjacency_matrix(matrix_counts,mode = 'undirected',weighted = T,add.colnames = T)
g1=delete.vertices(g1,which(degree(g1)<100))
E(g1)$color<-"blue"
plot(g1)
g1=graph_from_adjacency_matrix(matrix_counts,mode = 'undirected',weighted = T,add.colnames = T)
g1=delete.vertices(g1,which(degree(g1)<10))
plot(g1)
g1=graph_from_adjacency_matrix(matrix_counts,mode = 'undirected',weighted = T,add.colnames = T)
g1=delete.vertices(g1,which(strength(g1)<100))
E(g1)$color<-"blue"
plot(g1)
g1=delete.vertices(g1,which(strength(g1)<1000))
E(g1)$color<-"blue"
plot(g1)
g1=delete.vertices(g1,which(strength(g1)<10000))
E(g1)$color<-"blue"
plot(g1)
g1=delete.vertices(g1,which(strength(g1)<100))
E(g1)$color<-"blue"
plot(g1)
g1=delete.vertices(g1,which(strength(g1)<10))
E(g1)$color<-"blue"
plot(g1)
g1=delete.vertices(g1,which(strength(g1)<1))
E(g1)$color<-"blue"
plot(g1)
strength(g1)
g1=delete.vertices(g1,which(strength(g1)<median(strength(g1))))
E(g1)$color<-"blue"
plot(g1)
plot(g1,layout=layoutp, edge.width = log(E(g1)$weight/100))
plot(g1, edge.width = log(E(g1)$weight/100))
plot(g1, edge.width = log(E(g1)$weight/100))
g_sub <- delete.edges(g1, E(g1)[weight <= median(weight)])
plot(g_sub, edge.width = log(E(g1)$weight/100))
l <- layout.fruchterman.reingold(ig, niter=5000, area=vcount(ig)^4*10)
l <- layout.fruchterman.reingold(s1, niter=5000, area=vcount(ig)^4*10)
l <- layout.fruchterman.reingold(s1, niter=5000, area=vcount(s1)^4*10)
plot(s1, layout=l, edge.width = log(E(s1)$weight/100))
l=layout.lgl(s1)
plot(s1, layout=l, edge.width = log(E(s1)$weight/100))
s1 <- subgraph.edges(g1, E(g1)[E(g1)$weight>200], del=F)
plot(s1, layout=l, edge.width = log(E(s1)$weight/100))
g_sub <- delete.edges(g1, E(g1)[weight <= median(weight)])
plot(g_sub, edge.width = log(E(g1)$weight/100))
plot(g_sub,layout=l, edge.width = log(E(g1)$weight/100))
l=layout.lgl(g1)
plot(g_sub,layout=l, edge.width = log(E(g1)$weight/100))
g_sub <- delete.edges(g1, E(g1)[weight <= median(weight)])
plot(g_sub,layout=l, edge.width = log(E(g1)$weight/100))
indexes=seq_len(nrow(NHANES.categorical))
test=sample(indexes,size = 100)
test
NHANES.categorical.train[-test,]
NHANES.categorical.train=NHANES.categorical[-test,]
NHANES.categorical.test=NHANES.categorical[test,]
indexes=seq_len(nrow(NHANES.categorical))
test=sample(indexes,size = 100)
NHANES.categorical.train=NHANES.categorical[-test,]
NHANES.categorical.test=NHANES.categorical[test,]
rules.train = apriori(
NHANES.categorical.train,
parameter = list(
support = 0.1,
confidence = 0.75,
minlen = 2
),
control = list(verbose = F)
)
rules.test = apriori(
NHANES.categorical.test,
parameter = list(
support = 0.1,
confidence = 0.75,
minlen = 2
),
control = list(verbose = F)
)
#Transform to dataframe for analysis
rules.df.train = DATAFRAME(rules.train)
rules.df.test = DATAFRAME(rules.test)
indexes=seq_len(nrow(NHANES.categorical))
test=sample(indexes,size = 100)
NHANES.categorical.train=NHANES.categorical[-test,]
NHANES.categorical.test=NHANES.categorical[test,]
rules.train = apriori(
NHANES.categorical.train,
parameter = list(
support = 0.1,
confidence = 0.75,
minlen = 2
),
control = list(verbose = F)
)
rules.test = apriori(
NHANES.categorical.test,
parameter = list(
support = 0.1,
confidence = 0.75,
minlen = 2
),
control = list(verbose = F)
)
NHANES.categorical[,c(10,17)]
NHANES.categorical[,c(10,17)]
NHANES.categorical[,c(10,17)]%>%summary()
NHANES.categorical[,c(10,17)]%>%summary()
#Transform to dataframe for analysis
rules.df.train = DATAFRAME(rules.train)
rules.df.test = DATAFRAME(rules.test)
rules.df.train
rules.merged=rules.df.train%>%left_join(rules.df.test,suffix = 'test',by = c('LHS'='LHS','RHS'='RHS'))
rules.merged=rules.df.train%>%left_join(rules.df.test,suffix = c('train','test'),by = c('LHS'='LHS','RHS'='RHS'))
head(rules.merged)
rules.merged=rules.df.train%>%left_join(rules.df.test,suffix = c('.train','.test'),by = c('LHS'='LHS','RHS'='RHS'))
head(rules.merged)
ggplot(rules.merged,aes(x=confidence.train,y=confidence.test))+geom_point()
rules.merged=rules.df.train%>%left_join(rules.df.test,suffix = c('.train','.test'),by = c('LHS'='LHS','RHS'='RHS'))%>%mutate(closeSupport=ifelse(abs(support.train-test.support)<0.05,yes = 1,no=0))%>%filter(closeSupport==1)
rules.merged=rules.df.train%>%left_join(rules.df.test,suffix = c('.train','.test'),by = c('LHS'='LHS','RHS'='RHS'))%>%mutate(closeSupport=ifelse(abs(support.train-support.test)<0.05,yes = 1,no=0))%>%filter(closeSupport==1)
head(rules.merged)
nrow(rules.merged)
rules.merged=rules.df.train%>%left_join(rules.df.test,suffix = c('.train','.test'),by = c('LHS'='LHS','RHS'='RHS'))%>%mutate(closeSupport=ifelse(abs(support.train-support.test)<0.05,yes = 1,no=0))
nrow(rules.merged)
nrow(rules.merged)
head(rules.merged)
ggplot(rules.merged,aes(x=confidence.train,y=confidence.test))+geom_point()
ggplot(rules.merged,aes(x=confidence.train,y=confidence.test))+geom_smooth()
ggplot(rules.merged,aes(x=confidence.train,y=confidence.test))+geom_smooth(,method = 'lm')
ggplot(rules.merged,aes(x=confidence.train,y=confidence.test))+geom_smooth()+geom_point(alpha=0.5)
ggplot(rules.merged,aes(x=confidence.train,y=confidence.test))+geom_smooth()+geom_point(alpha=0.5)+geom_abline(slope = 1,intercept = 0,color='red')
ggplot(rules.merged,aes(x=confidence.train,y=confidence.test))+geom_smooth()+geom_point(alpha=0.01)+geom_abline(slope = 1,intercept = 0,color='red')
ggplot(rules.merged,aes(x=confidence.train,y=confidence.test))+geom_smooth()+geom_point(alpha=0.01)+geom_abline(slope = 1,intercept = 0,color='red')+theme_bw()
indexes=seq_len(nrow(NHANES.categorical))
test=sample(indexes,size = 1000)
NHANES.categorical.train=NHANES.categorical[-test,]
NHANES.categorical.test=NHANES.categorical[test,]
rules.train = apriori(
NHANES.categorical.train,
parameter = list(
support = 0.1,
confidence = 0.75,
minlen = 2
),
control = list(verbose = F)
)
#Transform to dataframe for analysis
rules.df.train = DATAFRAME(rules.train)
rules.df.test = DATAFRAME(rules.test)
rules.merged=rules.df.train%>%left_join(rules.df.test,suffix = c('.train','.test'),by = c('LHS'='LHS','RHS'='RHS'))%>%mutate(closeSupport=ifelse(abs(support.train-support.test)<0.05,yes = 1,no=0))%>%filter(closeSupport==1)
nrow(rules.merged)
head(rules.merged)
ggplot(rules.merged,aes(x=confidence.train,y=confidence.test))+geom_smooth()+geom_point(alpha=0.01)+geom_abline(slope = 1,intercept = 0,color='red')+theme_bw()
test=sample(indexes,size = 100)
indexes=seq_len(nrow(NHANES.categorical))
test=sample(indexes,size = 100)
NHANES.categorical.train=NHANES.categorical[-test,]
NHANES.categorical.test=NHANES.categorical[test,]
rules.train = apriori(
NHANES.categorical.train,
parameter = list(
support = 0.1,
confidence = 0.75,
minlen = 2
),
control = list(verbose = F)
)
rules.test = apriori(
NHANES.categorical.test,
parameter = list(
support = 0.1,
confidence = 0.75,
minlen = 2
),
control = list(verbose = F)
)
#Transform to dataframe for analysis
rules.df.train = DATAFRAME(rules.train)
rules.df.test = DATAFRAME(rules.test)
rules.merged=rules.df.train%>%left_join(rules.df.test,suffix = c('.train','.test'),by = c('LHS'='LHS','RHS'='RHS'))%>%mutate(closeSupport=ifelse(abs(support.train-support.test)<0.05,yes = 1,no=0))%>%filter(closeSupport==1)
nrow(rules.merged)
head(rules.merged)
ggplot(rules.merged,aes(x=confidence.train,y=confidence.test))+geom_smooth()+geom_point(alpha=0.01)+geom_abline(slope = 1,intercept = 0,color='red')+theme_bw()
indexes=seq_len(nrow(NHANES.categorical))
test=sample(indexes,size = 100,replace = T)
resample=sample(indexes,size = 100,replace = T)
NHANES.categorical.train=NHANES.categorical
NHANES.categorical.test=NHANES.categorical[resample,]
r
NHANES.categorical.train=NHANES.categorical
NHANES.categorical.resample=NHANES.categorical[resample,]
rules.train = apriori(
NHANES.categorical.train,
parameter = list(
support = 0.1,
confidence = 0.75,
minlen = 2
),
control = list(verbose = F)
)
rules.resample = apriori(
NHANES.categorical.test,
parameter = list(
support = 0.1,
confidence = 0.75,
minlen = 2
),
control = list(verbose = F)
)
#Transform to dataframe for analysis
rules.df.train = DATAFRAME(rules.train)
rules.df.resample = DATAFRAME(rules.resample)
#Merge both results. Only consider supports different at 5 percente max.
rules.merged=rules.df.train%>%left_join(rules.df.resample,suffix = c('.train','.resample'),by = c('LHS'='LHS','RHS'='RHS'))%>%mutate(closeSupport=ifelse(abs(support.train-support.resample)<0.05,yes = 1,no=0))%>%filter(closeSupport==1)
plot.confidence=ggplot(rules.merged,aes(x=confidence.train,y=resample.test))+geom_smooth()+geom_point(alpha=0.01)+geom_abline(slope = 1,intercept = 0,color='red')+theme_bw()
plot.confidence
plot.confidence=ggplot(rules.merged,aes(x=confidence.train,y=confidence.resample))+geom_smooth()+geom_point(alpha=0.01)+geom_abline(slope = 1,intercept = 0,color='red')+theme_bw()
plot.confidence
plot.lift=ggplot(rules.merged,aes(x=lift.train,y=lift.resample))+geom_smooth()+geom_point(alpha=0.01)+geom_abline(slope = 1,intercept = 0,color='red')+theme_bw()
plot.lift
plot.lift=ggplot(rules.merged,aes(x=lift.train,y=lift.resample))+geom_smooth()+geom_point(alpha=0.03)+geom_abline(slope = 1,intercept = 0,color='red')+theme_bw()
plot.lift
plot.lift=ggplot(rules.merged,aes(x=lift.train,y=lift.resample))+geom_smooth()+geom_point(alpha=0.03)+geom_abline(slope = 1,intercept = 0,color='red')+theme_bw()+xlim(0,3.1)
plot.lift
plot.lift=ggplot(rules.merged,aes(x=lift.train,y=lift.resample))+geom_smooth()+geom_point(alpha=0.03)+geom_abline(slope = 1,intercept = 0,color='red')+theme_bw()+xlim(0,3.1)
plot.lift
plot.lift=ggplot(rules.merged,aes(x=lift.train,y=lift.resample))+geom_smooth()+geom_point(alpha=0.03)+geom_abline(slope = 1,intercept = 0,color='red')+theme_bw()+xlim(0,3.1)
plot.lift=ggplot(rules.merged,aes(x=lift.train,y=lift.resample))+geom_smooth()+geom_point(alpha=0.03)+geom_abline(slope = 1,intercept = 0,color='red')+theme_bw()
plot.lift
rules.merged=rules.merged%>%mutate(lift_ratio_items=support.train/support.resample)
plot.lift=ggplot(rules.merged,aes(x=lift_ratio_items))+geom_histogram()
plot.lift
plot.lift=ggplot(rules.merged,aes(x=lift_ratio_items))+geom_histogram(color='black',fill='white')+theme_bw()
plot.lift
plot.confidence=ggplot(rules.merged,aes(x=confidence.train,y=confidence.resample))+geom_smooth()+geom_point(alpha=0.02)+geom_abline(slope = 1,intercept = 0,color='red')+theme_bw()
plot.confidence
plot.confidence
rules.merged=rules.merged%>%mutate(lift_ratio_items=support.train/support.resample)
plot.lift=ggplot(rules.merged,aes(x=lift_ratio_items))+geom_histogram(color='black',fill='white')+theme_bw()
plot.lift
0
nrow(resample)
nrow(resample)NHANES.categorical
nrow(NHANES.categorical)
indexes=seq_len(nrow(NHANES.categorical))
resample=sample(indexes,size = 500,replace = T)
NHANES.categorical.train=NHANES.categorical
NHANES.categorical.resample=NHANES.categorical[resample,]
rules.train = apriori(
NHANES.categorical.train,
parameter = list(
support = 0.1,
confidence = 0.75,
minlen = 2
),
control = list(verbose = F)
)
rules.resample = apriori(
NHANES.categorical.test,
parameter = list(
support = 0.1,
confidence = 0.75,
minlen = 2
),
control = list(verbose = F)
)
#Transform to dataframe for analysis
rules.df.train = DATAFRAME(rules.train)
rules.df.resample = DATAFRAME(rules.resample)
#Merge both results. Only consider supports different at 5 percente max.
rules.merged=rules.df.train%>%left_join(rules.df.resample,suffix = c('.train','.resample'),by = c('LHS'='LHS','RHS'='RHS'))%>%mutate(closeSupport=ifelse(abs(support.train-support.resample)<0.05,yes = 1,no=0))%>%filter(closeSupport==1)
plot.confidence=ggplot(rules.merged,aes(x=confidence.train,y=confidence.resample))+geom_smooth()+geom_point(alpha=0.02)+geom_abline(slope = 1,intercept = 0,color='red')+theme_bw()
plot.confidence
