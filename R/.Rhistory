deptos=slice.projects%>%filter(`Nombre producto genérico`=='CONSTRUCCIÓN DE EDIFICIOS Y DEPARTAMENTOS')
infra=slice.projects%>%filter(`Nombre producto genérico`=='CONSTRUCCIÓN DE OBRAS CIVILES')
calles=slice.projects%>%filter(`Nombre producto genérico`=='PAVIMENTACIÓN DE CARRETERAS O CAMINOS')
locales=slice.projects%>%filter(`Nombre producto genérico`=='CONSTRUCCIÓN DE LOCALES, PLANTAS COMERCIALES O INDUSTRIALES')
locales
#Crear una variable de tipo de institucion
table(df$TypeOrganism)
uk=  df[,c('NombreOrganismo','NombreOrganismo_clean','TypeOrganism')]%>%filter(TypeOrganism=='Other')%>%group_by(NombreOrganismo_clean)%>%count()%>%arrange(-n)
uk
#Crear una variable de tipo de institucion
table(df$TypeOrganism)
knitr::opts_chunk$set(echo = F)
source('C:\\repos\\learn-doing\\R\\functions.R')
df%>%group_by(TypeOrganism)%>%count()
df%>%group_by(TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%mutate(prc=n/sum(n))
df%>%group_by(TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%mutate(prc=round(n/sum(n),2)
f%>%group_by(TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%mutate(prc=round(n/sum(n),2))
df%>%group_by(TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%mutate(prc=round(n/sum(n),2))
nrow(df)
knitr::opts_chunk$set(echo = F)
source('C:\\repos\\learn-doing\\R\\functions.R')
slice.projects=df%>%group_by(Codigo)%>%filter(winner=='Seleccionada')%>%ungroup%>%mutate(percentile=ntile(montoOferta,100))%>%mutate()
slice.projects%>%group_by(TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%mutate(prc=round(n/sum(n),2))
colnames(slice.projects)
organisms.table.detailed=slice.projects%>%group_by(TypeOrganism)%>%summarise(n=length(Codigo),size.mean=mean(`Monto Estimado Adjudicado`,time.mean=TiempoDuracionContrato,offers.mean=mean(NumeroOferentes),size.meanpercentile=mean(percentile)))%>%arrange(-n)%>%ungroup()%>%mutate(prc=round(n/sum(n),2))
organisms.table.detailed
organisms.table.detailed=slice.projects%>%group_by(TypeOrganism)%>%summarise(n=length(Codigo),size.mean=mean(`Monto Estimado Adjudicado`),time.mean=TiempoDuracionContrato,offers.mean=mean(NumeroOferentes),size.meanpercentile=mean(percentile))%>%arrange(-n)%>%ungroup()%>%mutate(prc=round(n/sum(n),2))
organisms.table.detailed
organisms.table.detailed=slice.projects%>%group_by(TypeOrganism)%>%summarise(n=length(Codigo),size.mean=mean(`Monto Estimado Adjudicado`),time.mean=TiempoDuracionContrato,offers.mean=mean(NumeroOferentes),size.meanpercentile=mean(percentile))%>%arrange(-n)
organisms.table.detailed
organisms.table.detailed=slice.projects%>%group_by(TypeOrganism)%>%summarise(n=length(Codigo),size.mean=mean(`Monto Estimado Adjudicado`),time.mean=mean(TiempoDuracionContrato),offers.mean=mean(NumeroOferentes),size.meanpercentile=mean(percentile))%>%arrange(-n)
organisms.table.detailed
organisms.table.detailed=slice.projects%>%group_by(TypeOrganism)%>%summarise(n=length(Codigo),size.mean=mean(`Monto Estimado Adjudicado`,na,rm=T),time.mean=mean(TiempoDuracionContrato),offers.mean=mean(NumeroOferentes),size.meanpercentile=mean(percentile))%>%arrange(-n)
organisms.table.detailed=slice.projects%>%group_by(TypeOrganism)%>%summarise(n=length(Codigo),size.mean=mean(`Monto Estimado Adjudicado`,na.rm=T),time.mean=mean(TiempoDuracionContrato),offers.mean=mean(NumeroOferentes),size.meanpercentile=mean(percentile))%>%arrange(-n)
organisms.table.detailed
mean(slice.projects$`Monto Estimado Adjudicado`)
mean(slice.projects$`Monto Estimado Adjudicado`,na.rm = T)
organisms.table.detailed=slice.projects%>%group_by(TypeOrganism)%>%summarise(n=length(Codigo),size.mean=mean(`Monto Estimado Adjudicado`,na.rm=T)/1000,time.mean=mean(TiempoDuracionContrato),offers.mean=mean(NumeroOferentes),totsize.per=sum(`Monto Estimado Adjudicado`))%>%arrange(-n)%>%ungroup()%>%mutate(totsize.per=totsize.per/sum(totsize.per))
organisms.table.detailed
organisms.table.detailed=slice.projects%>%group_by(TypeOrganism)%>%summarise(n=length(Codigo),size.mean=mean(`Monto Estimado Adjudicado`,na.rm=T)/1000,time.mean=mean(TiempoDuracionContrato),offers.mean=mean(NumeroOferentes),totsize.per=sum(`Monto Estimado Adjudicado`,na.rm=T))%>%arrange(-n)%>%ungroup()%>%mutate(totsize.per=totsize.per/sum(totsize.per))
organisms.table.detailed
colnames(slice.projects)
table(slice.projects$`Nombre producto genérico`)
table(slice.projects$Nombre)
colnames(slice.projects)
project.names=slice.projects%>%dplyr::select(Codigo,Nombre)
library(tm)
library(tm)
library(topicmodels)
library(tm)
library(topicmodels)
library(wordcloud)
colnames(project.names)<-c('doc_id','text')
corpus <- DataframeSource(project.names)
corpus
corpus <- tm_map(corpus, content_transformer(function(x) iconv(x = x,from = "latin1",to= "ASCII", sub="@")))
corpus=VCorpus(corpus)
corpus <- tm_map(corpus, content_transformer(function(x) iconv(x = x,from = "latin1",to= "ASCII", sub="@")))
corpus <- tm_map(corpus, content_transformer(function(x) gsub('\\S+@\\S+', '', x)))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, content_transformer(removePunctuation))
corpus <- tm_map(corpus, content_transformer(stripWhitespace))
corpus <- tm_map(corpus, content_transformer(removeNumbers))
corpus <- tm_map(corpus, removeWords, words = c(stopwords("es")))
corpus <- tm_map(corpus, removeWords, words = c(stopwords("es")))
plot(pressure)
`
inspect(corpus[2])
inspect(corpus[[2])
inspect(corpus[[2]])
inspect(corpus[[10]])
inspect(corpus[[100]])
inspect(corpus[[1000]])
inspect(corpus[[1020]])
inspect(corpus[[110]])
inspect(corpus[[112]])
inspect(corpus[[119]])
inspect(corpus[[119]])
dtm<-DocumentTermMatrix(corpus)
dtm<-DocumentTermMatrix(corpus)
freq.term=tidy(dtm)%>%group_by(term)%>%summarise(count=sum(count))%>%arrange(-count)
librry(tidy)
library(tidy)
library(tidyr)
freq.term=tidy(dtm)%>%group_by(term)%>%summarise(count=sum(count))%>%arrange(-count)
library(broom)
freq.term=tidy(dtm)%>%group_by(term)%>%summarise(count=sum(count))%>%arrange(-count)
library(tidytext)
freq.term=tidy(dtm)%>%group_by(term)%>%summarise(count=sum(count))%>%arrange(-count)
freq.term.display=freq.term[1:50,]
freq.term.display
wordcloud2(data = freq.term.display,size = .5)
library(wordcloud)
wordcloud2(data = freq.term.display,size = .5)
library(wordcloud2)
wordcloud2(data = freq.term.display,size = .5)
freq.term
dtm
wordcloud2(data = freq.term.display,size = .5)
tidy(dtm)
head(slice.projects$Codigo)
tidy(dtm)
freq.term.merged=tidy(dtm)%>%left_join(projects_slice,by=c('document'='Codigo'))
freq.term.merged=tidy(dtm)%>%left_join(slice.projects,by=c('document'='Codigo'))
freq.term.merged=tidy(dtm)%>%left_join(slice.projects%>%mutate(Codigo=as.character(Codigo)),by=c('document'='Codigo'))
freq.term.merged
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%top_n(n=10,wt = n)
freq.type
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%top_n(n=10)
freq.type
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%top_n(n=10)
freq.type
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%top_n(n=10)%>%arrange(TypeOrganism,-n)
freq.type
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%top_n(n=10)%>%arrange(-TypeOrganism,-n)
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%top_n(n=10)%>%arrange(TypeOrganism,-n)
View(freq.type)
freq.type
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%top_n(n=10)%>%mutate(ranking=seq_len(10))%>%arrange(TypeOrganism,-n)%>%pivot_wider(names_from = TypeOrganism,values_from=n,id_cols = ranking)
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%top_n(n=10)%>%mutate(ranking=seq_len(10))%>%arrange(TypeOrganism,-n)
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%top_n(n=10)
freq.type
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%top_n(n=10)
freq.type
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%top_n(n=10,wt = n)%>%mutate(ranking=seq_len(10))%>%arrange(TypeOrganism,-n)%>%pivot_wider(names_from = TypeOrganism,values_from=n,id_cols = ranking)
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%top_n(n=10,wt = n)
freq.type
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%top_n(n=10,wt = n)%>%arrange(TypeOrganism,-n)
freq.type
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%top_n(n=10,wt = n)
freq.type
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%top_n(n=1,wt = n)
freq.type
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%top_n(n=5,wt = n)
freq.type
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%top_n(n=5,wt = n)%>%arrange(TypeOrganism,-n)
freq.type
?top_n
?slice_max
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%slice_head(n=10,wt = n,with_ties=F)%>%arrange(TypeOrganism,-n)%>%mutate(ranking=seq_len(10))%>%pivot_wider(names_from = TypeOrganism,values_from=n,id_cols = ranking)
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%slice_head(n=10,with_ties=F)%>%arrange(TypeOrganism,-n)%>%mutate(ranking=seq_len(10))%>%pivot_wider(names_from = TypeOrganism,values_from=n,id_cols = ranking)
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%slice_head(n=10,with_ties=F)
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%slice_head(10,with_ties=F)
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%arrange(TypeOrganism,-n)%>%slice_head(10)%>%mutate(ranking=seq_len(10))%>%pivot_wider(names_from = TypeOrganism,values_from=n,id_cols = ranking)
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%arrange(TypeOrganism,-n)%>%slice_head(10)
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%arrange(TypeOrganism,-n)%>%slice_head(order_by=n,n = 10)
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%arrange(TypeOrganism,-n)%>%slice_head(n = 10)
freq.type
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%arrange(TypeOrganism,-n)%>%slice_head(n = 10)%>%mutate(ranking=seq_len(10))%>%pivot_wider(names_from = TypeOrganism,values_from=n,id_cols = ranking)
freq.type
freq.type=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%arrange(TypeOrganism,-n)%>%slice_head(n = 10)%>%mutate(ranking=seq_len(10))%>%pivot_wider(names_from = TypeOrganism,values_from=term,id_cols = ranking)
freq.type
freq.type.table=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%arrange(TypeOrganism,-n)%>%slice_head(n = 10)%>%mutate(ranking=seq_len(10))%>%pivot_wider(names_from = TypeOrganism,values_from=term,id_cols = ranking)
library(tm)
library(topicmodels)
library(wordcloud2)
library(broom)
library(tidytext)
knitr::opts_chunk$set(echo = F)
source('C:\\repos\\learn-doing\\R\\functions.R')
slice.projects=df%>%group_by(Codigo)%>%filter(winner=='Seleccionada')%>%ungroup%>%mutate(percentile=ntile(montoOferta,100))%>%mutate()
freq.type.table
freq.term
View(freq.term)
View(freq.term.merged)
##Why not topics?
total_docs=length(corpus)
k.folds<- 10
folds <- createFolds(1:total_docs, k = k.folds, list = F, returnTrain = FALSE)
##Why not topics?
library(caret)
total_docs=length(corpus)
k.folds<- 10
folds <- createFolds(1:total_docs, k = k.folds, list = F, returnTrain = FALSE)
candidates=c(2,3,5,8,10)
cv.results=data.frame()
for (k in candidates) {
print(k)
cv.results.intra=data.frame()
for (i in seq_len(k.folds)) {
train.corpus=corpus[folds!=i]
test=corpus[folds==i]
lda.fitted=LDA(x = DocumentTermMatrix(train.corpus),k)
perp.iter=topicmodels::perplexity(lda.fitted,newdata =  DocumentTermMatrix(test))
cv.results.intra=rbind(data.frame(k=k,i=i,perplexity=perp.iter),cv.results.intra)
}
cv.results.intra=cv.results.intra%>%group_by(k)%>%summarise(mean.perp=mean(perplexity))
cv.results=rbind(cv.results.intra,cv.results)
}
for (k in candidates) {
print(k)
cv.results.intra=data.frame()
for (i in seq_len(k.folds)) {
train.corpus=corpus[folds!=i]
test=corpus[folds==i]
dtm.train=DocumentTermMatrix(train.corpus)
raw.sum=apply(dtm.train,1,FUN=sum) #sum by raw each raw of the table
table=dtm.train[raw.sum!=0,]
lda.fitted=LDA(x = dtm.train,k)
perp.iter=topicmodels::perplexity(lda.fitted,newdata =  DocumentTermMatrix(test))
cv.results.intra=rbind(data.frame(k=k,i=i,perplexity=perp.iter),cv.results.intra)
}
cv.results.intra=cv.results.intra%>%group_by(k)%>%summarise(mean.perp=mean(perplexity))
cv.results=rbind(cv.results.intra,cv.results)
}
total_docs=length(corpus)
k.folds<- 10
folds <- createFolds(1:total_docs, k = k.folds, list = F, returnTrain = FALSE)
candidates=c(2,3,5,8,10)
cv.results=data.frame()
for (k in candidates) {
print(k)
cv.results.intra=data.frame()
for (i in seq_len(k.folds)) {
train.corpus=corpus[folds!=i]
test=corpus[folds==i]
dtm.train=DocumentTermMatrix(train.corpus)
raw.sum=apply(dtm.train,1,FUN=sum) #sum by raw each raw of the table
table=dtm.train[raw.sum!=0,]
lda.fitted=LDA(x = dtm.train,k)
perp.iter=topicmodels::perplexity(lda.fitted,newdata =  DocumentTermMatrix(test))
cv.results.intra=rbind(data.frame(k=k,i=i,perplexity=perp.iter),cv.results.intra)
}
cv.results.intra=cv.results.intra%>%group_by(k)%>%summarise(mean.perp=mean(perplexity))
cv.results=rbind(cv.results.intra,cv.results)
}
total_docs=length(corpus)
k.folds<- 5
folds <- createFolds(1:total_docs, k = k.folds, list = F, returnTrain = FALSE)
candidates=c(2,3,5,8,10)
cv.results=data.frame()
for (k in candidates) {
print(k)
cv.results.intra=data.frame()
for (i in seq_len(k.folds)) {
train.corpus=corpus[folds!=i]
test=corpus[folds==i]
dtm.train=DocumentTermMatrix(train.corpus)
raw.sum=apply(dtm.train,1,FUN=sum) #sum by raw each raw of the table
dtm.train=dtm.train[raw.sum!=0,]
lda.fitted=LDA(x = dtm.train,k)
perp.iter=topicmodels::perplexity(lda.fitted,newdata =  DocumentTermMatrix(test))
cv.results.intra=rbind(data.frame(k=k,i=i,perplexity=perp.iter),cv.results.intra)
}
cv.results.intra=cv.results.intra%>%group_by(k)%>%summarise(mean.perp=mean(perplexity))
cv.results=rbind(cv.results.intra,cv.results)
}
ggplot(cv.results,aes(x=k,y=mean.perp))+geom_point()+geom_line()+theme_bw()+ggtitle('Perplexity by Number of topics')+xlab('Number of topics')+ylab('Mean Perplexity')
load("C:/repos/learn-doing/data/contractData.Rdata")
library(tm)
library(topicmodels)
library(wordcloud2)
library(broom)
library(tidytext)
knitr::opts_chunk$set(echo = F)
source('C:\\repos\\learn-doing\\R\\functions.R')
slice.projects=df%>%group_by(Codigo)%>%filter(winner=='Seleccionada')%>%ungroup%>%mutate(percentile=ntile(montoOferta,100))%>%mutate()
library(feather)
library(magrittr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(AER)
library(tidyr)
library(kableExtra)
library(stargazer)
library(sandwich)
library(skimr)
library(tm)
library(topicmodels)
library(wordcloud2)
library(broom)
library(tidytext)
knitr::opts_chunk$set(echo = F)
source('C:\\repos\\learn-doing\\R\\functions.R')
slice.projects=df%>%group_by(Codigo)%>%filter(winner=='Seleccionada')%>%ungroup%>%mutate(percentile=ntile(montoOferta,100))%>%mutate()
rm(df)
project.names=slice.projects%>%dplyr::select(Codigo,Nombre)
colnames(project.names)<-c('doc_id','text')
corpus <- DataframeSource(project.names)
corpus=VCorpus(corpus)
corpus <- tm_map(corpus, content_transformer(function(x) iconv(x = x,from = "latin1",to= "ASCII", sub="@")))
corpus <- tm_map(corpus, content_transformer(function(x) gsub('\\S+@\\S+', '', x)))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, content_transformer(removePunctuation))
corpus <- tm_map(corpus, content_transformer(stripWhitespace))
corpus <- tm_map(corpus, content_transformer(removeNumbers))
corpus <- tm_map(corpus, removeWords, words = c(stopwords("es")))
dtm<-DocumentTermMatrix(corpus)
freq.term=tidy(dtm)%>%group_by(term)%>%summarise(count=sum(count))%>%arrange(-count)
freq.term.merged=tidy(dtm)%>%left_join(slice.projects%>%mutate(Codigo=as.character(Codigo)),by=c('document'='Codigo'))
freq.type.table=freq.term.merged%>%group_by(term,TypeOrganism)%>%count()%>%arrange(-n)%>%ungroup()%>%group_by(TypeOrganism)%>%arrange(TypeOrganism,-n)%>%slice_head(n = 10)%>%mutate(ranking=seq_len(10))%>%pivot_wider(names_from = TypeOrganism,values_from=term,id_cols = ranking)
##Why not topics?
library(caret)
total_docs=length(corpus)
k.folds<- 5
folds <- createFolds(1:total_docs, k = k.folds, list = F, returnTrain = FALSE)
candidates=c(2,3,5,8,10)
cv.results=data.frame()
for (k in candidates) {
print(k)
cv.results.intra=data.frame()
for (i in seq_len(k.folds)) {
train.corpus=corpus[folds!=i]
test=corpus[folds==i]
dtm.train=DocumentTermMatrix(train.corpus)
raw.sum=apply(dtm.train,1,FUN=sum) #sum by raw each raw of the table
dtm.train=dtm.train[raw.sum!=0,]
lda.fitted=LDA(x = dtm.train,k)
perp.iter=topicmodels::perplexity(lda.fitted,newdata =  DocumentTermMatrix(test))
cv.results.intra=rbind(data.frame(k=k,i=i,perplexity=perp.iter),cv.results.intra)
}
cv.results.intra=cv.results.intra%>%group_by(k)%>%summarise(mean.perp=mean(perplexity))
cv.results=rbind(cv.results.intra,cv.results)
}
dtm.train
lda.fitted=LDA(x = dtm.train,k)
perp.iter=topicmodels::perplexity(lda.fitted,newdata =  DocumentTermMatrix(test))
dtm.test=DocumentTermMatrix(test.corpus)
raw.sum=apply(dtm.test,1,FUN=sum) #sum by raw each raw of the table
dtm.test=dtm.test[raw.sum!=0,]
dtm.test=DocumentTermMatrix(test)
raw.sum=apply(dtm.test,1,FUN=sum) #sum by raw each raw of the table
raw.sum=apply(dtm.test,1,FUN=sum) #sum by raw each raw of the table
dtm.test=dtm.test[raw.sum!=0,]
perp.iter=topicmodels::perplexity(lda.fitted,newdata =  dtm.test)
cv.results.intra=rbind(data.frame(k=k,i=i,perplexity=perp.iter),cv.results.intra)
cv.results.intra
total_docs=length(corpus)
k.folds<- 5
folds <- createFolds(1:total_docs, k = k.folds, list = F, returnTrain = FALSE)
candidates=c(2,3,5,8,10)
cv.results=data.frame()
for (k in candidates) {
print(k)
cv.results.intra=data.frame()
for (i in seq_len(k.folds)) {
train.corpus=corpus[folds!=i]
test=corpus[folds==i]
dtm.train=DocumentTermMatrix(train.corpus)
raw.sum=apply(dtm.train,1,FUN=sum) #sum by raw each raw of the table
dtm.train=dtm.train[raw.sum!=0,]
dtm.test=DocumentTermMatrix(test)
raw.sum=apply(dtm.test,1,FUN=sum) #sum by raw each raw of the table
dtm.test=dtm.test[raw.sum!=0,]
lda.fitted=LDA(x = dtm.train,k)
perp.iter=topicmodels::perplexity(lda.fitted,newdata =  dtm.test)
cv.results.intra=rbind(data.frame(k=k,i=i,perplexity=perp.iter),cv.results.intra)
}
cv.results.intra=cv.results.intra%>%group_by(k)%>%summarise(mean.perp=mean(perplexity))
cv.results=rbind(cv.results.intra,cv.results)
}
library(tm)
library(topicmodels)
library(wordcloud2)
library(broom)
library(tidytext)
library(caret)
knitr::opts_chunk$set(echo = F)
source('C:\\repos\\learn-doing\\R\\functions.R')
slice.projects=df%>%group_by(Codigo)%>%filter(winner=='Seleccionada')%>%ungroup%>%mutate(percentile=ntile(montoOferta,100))%>%mutate()
ggplot(cv.results,aes(x=k,y=mean.perp))+geom_point()+geom_line()+theme_bw()+ggtitle('Perplexity by Number of topics')+xlab('Number of topics')+ylab('Mean Perplexity')
cv.results
View(project.names)
tidy(corpus)
ibrary(feather)
library(magrittr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(AER)
library(tidyr)
library(kableExtra)
library(stargazer)
library(sandwich)
library(skimr)
source('C:\\repos\\learn-doing\\R\\functions.R')
thresholdClose=0.005
thresholdSize=20e6
df = read_feather('C:\\repos\\learn-doing\\data\\lic_construccion_feather.feather') %>%
rename(estadoOferta=`Estado Oferta`,montoOferta = `Valor Total Ofertado`, winner = `Oferta seleccionada`,cantidadOferta=`Cantidad Ofertada`,tipoAdquisicion=`Tipo de Adquisición`)
glimpse(df)
skim(df)
#Accepted Offers? Be careful computing statistics, should not eliminate straight away. TODO:desert lics.
#Cleaning
#df <- read.csv("C:/repos/public-procurement/bids.csv", encoding="CP1252")
df=df%>%mutate(FechaInicio=as.Date(FechaInicio))%>%mutate(year=year(FechaInicio),MCA_MPO=montoOferta/MontoEstimado)
df=df%>%mutate(year=as.numeric(year))%>%
mutate(NombreOrganismo_clean=tolower(NombreOrganismo))
df=df%>%mutate(TypeOrganism=case_when(grepl(x=NombreOrganismo_clean,pattern = 'munici',fixed = T)  == T ~ "Municipality",
grepl(x=NombreOrganismo_clean,pattern = 'ilustre',fixed = T)  == T ~ "Municipality",
grepl(x=NombreOrganismo_clean,pattern = 'serv',fixed = T)  == T ~ "Ministry",
grepl(x=NombreOrganismo_clean,pattern = 'minis',fixed = T)  == T ~ "Ministry",
grepl(x=NombreOrganismo_clean,pattern = 'subse',fixed = T)  == T ~ "Ministry",
grepl(x=NombreOrganismo_clean,pattern = 'dirección de obras hidráulicas',fixed = T)  == T ~ "Ministry",
grepl(x=NombreOrganismo_clean,pattern = 'universidad',fixed = T)  == T ~ "University",
grepl(x=NombreOrganismo_clean,pattern = 'goberna',fixed = T)  == T ~ "Regional Government",
grepl(x=NombreOrganismo_clean,pattern = 'gobierno regional',fixed = T)  == T ~ "Regional Government",
grepl(x=NombreOrganismo_clean,pattern = 'carabiner',fixed = T)  == T ~ "Police, Investigations",
grepl(x=NombreOrganismo_clean,pattern = 'investigaciones',fixed = T)  == T ~ "Police, Investigations",
grepl(x=NombreOrganismo_clean,pattern = 'gendarmer',fixed = T)  == T ~ "Police, Investigations",
grepl(x=NombreOrganismo_clean,pattern = 'junta nacional de jardines',fixed = T)  == T ~ "Child School Board",
grepl(x=NombreOrganismo_clean,pattern = 'ejército',fixed = T)  == T ~ "Army,Navy",
grepl(x=NombreOrganismo_clean,pattern = 'armada de chile',fixed = T)  == T ~ "Army,Navy",
TRUE~'Other'))
pre.summarybids=generateDfBidsSummary(bids = df)
#Filtering
df=df%>%filter(cantidadOferta==1&CantidadAdjudicada<=1,montoOferta>=1e6)
df=df%>%filter(MontoEstimado>thresholdSize)
df.repetidos=df%>%group_by(Codigo)%>%filter(winner=='Seleccionada')%>%select(Nombre,NombreOrganismo,montoOferta,NombreProveedor)%>%mutate(n=length(NombreProveedor))%>%filter(n>1)
df=df%>%filter(!Codigo%in%(df.repetidos$Codigo))
save(df,file = 'C:\\repos\\learn-doing\\data\\contractData.Rdata')
post.summarybids=generateDfBidsSummary(bids = df)
#Create Firm datasets
df.difs=df%>%filter(estadoOferta=='Aceptada')%>%group_by(Codigo)%>%arrange(montoOferta)%>%summarise(dif=(montoOferta[2]-montoOferta[1])/montoOferta[2],ganador=montoOferta[1],segundo=montoOferta[2])
df.wins=df%>%group_by(RutProveedor)%>%summarise(ofertas=length(winner),wins=length(winner[winner=='Seleccionada']),probWin=wins/ofertas)
#General Statistics
contractors.statistics=df%>%group_by(RutProveedor,NombreProveedor)%>%summarise(firstYear=min(year),
lastYear=max(year),
life=lastYear-firstYear,
firstYearAw=min(year[CantidadAdjudicada>=1]),
uniqueOrganism=length(unique(NombreOrganismo)),
uniqueUnits=length(unique(NombreUnidad)),
tot=length(Codigo),
totAdj=length(Codigo[CantidadAdjudicada>=1]),
montoTot=sum(montoOferta[CantidadAdjudicada>=1]))%>%arrange(-montoTot)%>%ungroup()%>%
mutate(acum=cumsum(montoTot)/sum(montoTot))%>%mutate(Pareto=ifelse(acum<=0.9,1,0))
library(feather)
library(magrittr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(AER)
library(tidyr)
library(kableExtra)
library(stargazer)
library(sandwich)
library(skimr)
source('C:\\repos\\learn-doing\\R\\functions.R')
thresholdClose=0.005
thresholdSize=20e6
df = read_feather('C:\\repos\\learn-doing\\data\\lic_construccion_feather.feather') %>%
rename(estadoOferta=`Estado Oferta`,montoOferta = `Valor Total Ofertado`, winner = `Oferta seleccionada`,cantidadOferta=`Cantidad Ofertada`,tipoAdquisicion=`Tipo de Adquisición`)
glimpse(df)
skim(df)
#Accepted Offers? Be careful computing statistics, should not eliminate straight away. TODO:desert lics.
#Cleaning
#df <- read.csv("C:/repos/public-procurement/bids.csv", encoding="CP1252")
df=df%>%mutate(FechaInicio=as.Date(FechaInicio))%>%mutate(year=year(FechaInicio),MCA_MPO=montoOferta/MontoEstimado)
df=df%>%mutate(year=as.numeric(year))%>%
mutate(NombreOrganismo_clean=tolower(NombreOrganismo))
df=df%>%mutate(TypeOrganism=case_when(grepl(x=NombreOrganismo_clean,pattern = 'munici',fixed = T)  == T ~ "Municipality",
grepl(x=NombreOrganismo_clean,pattern = 'ilustre',fixed = T)  == T ~ "Municipality",
grepl(x=NombreOrganismo_clean,pattern = 'serv',fixed = T)  == T ~ "Ministry",
grepl(x=NombreOrganismo_clean,pattern = 'minis',fixed = T)  == T ~ "Ministry",
grepl(x=NombreOrganismo_clean,pattern = 'subse',fixed = T)  == T ~ "Ministry",
grepl(x=NombreOrganismo_clean,pattern = 'dirección de obras hidráulicas',fixed = T)  == T ~ "Ministry",
grepl(x=NombreOrganismo_clean,pattern = 'universidad',fixed = T)  == T ~ "University",
grepl(x=NombreOrganismo_clean,pattern = 'goberna',fixed = T)  == T ~ "Regional Government",
grepl(x=NombreOrganismo_clean,pattern = 'gobierno regional',fixed = T)  == T ~ "Regional Government",
grepl(x=NombreOrganismo_clean,pattern = 'carabiner',fixed = T)  == T ~ "Police, Investigations",
grepl(x=NombreOrganismo_clean,pattern = 'investigaciones',fixed = T)  == T ~ "Police, Investigations",
grepl(x=NombreOrganismo_clean,pattern = 'gendarmer',fixed = T)  == T ~ "Police, Investigations",
grepl(x=NombreOrganismo_clean,pattern = 'junta nacional de jardines',fixed = T)  == T ~ "Child School Board",
grepl(x=NombreOrganismo_clean,pattern = 'ejército',fixed = T)  == T ~ "Army,Navy",
grepl(x=NombreOrganismo_clean,pattern = 'armada de chile',fixed = T)  == T ~ "Army,Navy",
TRUE~'Other'))
pre.summarybids=generateDfBidsSummary(bids = df)
#Filtering
df=df%>%filter(cantidadOferta==1&CantidadAdjudicada<=1,montoOferta>=1e6)
df=df%>%filter(MontoEstimado>thresholdSize)
df.repetidos=df%>%group_by(Codigo)%>%filter(winner=='Seleccionada')%>%select(Nombre,NombreOrganismo,montoOferta,NombreProveedor)%>%mutate(n=length(NombreProveedor))%>%filter(n>1)
df=df%>%filter(!Codigo%in%(df.repetidos$Codigo))
save(df,file = 'C:\\repos\\learn-doing\\data\\contractData.Rdata')
post.summarybids=generateDfBidsSummary(bids = df)
#Create Firm datasets
df.difs=df%>%filter(estadoOferta=='Aceptada')%>%group_by(Codigo)%>%arrange(montoOferta)%>%summarise(dif=(montoOferta[2]-montoOferta[1])/montoOferta[2],ganador=montoOferta[1],segundo=montoOferta[2])
df.wins=df%>%group_by(RutProveedor)%>%summarise(ofertas=length(winner),wins=length(winner[winner=='Seleccionada']),probWin=wins/ofertas)
#General Statistics
contractors.statistics=df%>%group_by(RutProveedor,NombreProveedor)%>%summarise(firstYear=min(year),
lastYear=max(year),
life=lastYear-firstYear,
firstYearAw=min(year[CantidadAdjudicada>=1]),
uniqueOrganism=length(unique(NombreOrganismo)),
uniqueUnits=length(unique(NombreUnidad)),
tot=length(Codigo),
totAdj=length(Codigo[CantidadAdjudicada>=1]),
montoTot=sum(montoOferta[CantidadAdjudicada>=1]))%>%arrange(-montoTot)%>%ungroup()%>%
mutate(acum=cumsum(montoTot)/sum(montoTot))%>%mutate(Pareto=ifelse(acum<=0.9,1,0))
#Create Datasets
start=0
split1=2
split2=2
merged.wins=createMultiPeriodDataset(df,start = start, split1 =split1,split2=split2 )
#Begin Regression Analysis with outcome variable as probability
head(merged.wins)
max(df$FechaInicio)
min(df$FechaInicio)
table(merged.wins$idperiodpre)
table(merged.wins$idperiodpost)
#Begin Regression Analysis with outcome variable as probability
head(merged.wins)
#Begin Regression Analysis with outcome variable as probability
merged.wins%>%filter(winspos==0)
#Begin Regression Analysis with outcome variable as probability
merged.wins%>%filter(winspos==0)
merged.wins%>%filter(winspost==0)
merged.wins%>%filter(ofertaspost==0)
##First specification
lm.spec1.cont<-lm(probWinpost~(winspre),data = merged.wins)
robust.spec1.cont<- vcovHC(lm.spec1.cont, type = "HC1")%>%diag()%>%sqrt()
summary(lm.spec1.cont)
